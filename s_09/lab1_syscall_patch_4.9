Signed-off-by: Jerry Cooperstein <coop@linuxfoundation.org>

diff -Nur linux-4.9/arch/x86/entry/syscalls/syscall_32.tbl linux-4.9_patched/arch/x86/entry/syscalls/syscall_32.tbl
--- linux-4.9/arch/x86/entry/syscalls/syscall_32.tbl	2016-11-27 15:08:04.000000000 -0600
+++ linux-4.9_patched/arch/x86/entry/syscalls/syscall_32.tbl	2016-12-01 09:25:55.833552842 -0600
@@ -389,3 +389,4 @@
 380	i386	pkey_mprotect		sys_pkey_mprotect
 381	i386	pkey_alloc		sys_pkey_alloc
 382	i386	pkey_free		sys_pkey_free
+383	i386	my_syscall		sys_my_syscall
diff -Nur linux-4.9/arch/x86/entry/syscalls/syscall_64.tbl linux-4.9_patched/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-4.9/arch/x86/entry/syscalls/syscall_64.tbl	2016-11-27 15:08:04.000000000 -0600
+++ linux-4.9_patched/arch/x86/entry/syscalls/syscall_64.tbl	2016-12-01 09:26:25.992894733 -0600
@@ -338,6 +338,7 @@
 329	common	pkey_mprotect		sys_pkey_mprotect
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
+332	common	my_syscall		sys_my_syscall
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -Nur linux-4.9/kernel/sys.c linux-4.9_patched/kernel/sys.c
--- linux-4.9/kernel/sys.c	2016-11-27 15:08:04.000000000 -0600
+++ linux-4.9_patched/kernel/sys.c	2016-12-01 09:27:07.177996031 -0600
@@ -2433,3 +2433,22 @@
 	return 0;
 }
 #endif /* CONFIG_COMPAT */
+
+/* Adding a dynamical system call */
+struct my_sc_struct {
+	long (*fun)(unsigned long p1);
+} my_sc = {
+	NULL};
+EXPORT_SYMBOL(my_sc);
+
+SYSCALL_DEFINE1(my_syscall, unsigned long, p1)
+{
+	struct my_sc_struct *s = (struct my_sc_struct *)&my_sc;
+
+	pr_info("Entering my_syscall with p1 = %ld at jiffies=%ld\n",
+		p1, jiffies);
+	if (!s || !s->fun)
+		return -ENOSYS;
+	return s->fun(p1);
+}
+
